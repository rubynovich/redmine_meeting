- content_for(:header_tags) do
  = javascript_include_tag :jquery_nested_form, plugin: 'redmine_meeting'

= error_messages_for @object
= back_url_hidden_field_tag

.box.tabular
  %p
    = f.label :is_external, l(:label_is_external_meeting)
    = f.check_box :is_external, value: 1
  = render partial: "online_meetings/form_meeting_agendas", locals: {f: f} rescue nil
  %fieldset
    %p
      = f.label :subject, class: 'necessary'
      = f.text_field :subject, size: 100, style: 'width: 80%'
    %p{id: 'external_place_type'}
      = f.label :external_place_type, class: 'necessary'
      = f.radio_button :external_place_type, :external_company
      = t(:external_company, scope: 'external_place_for_select')
      = f.radio_button :external_place_type, :building_object
      = t(:building_object, scope: 'external_place_for_select')
    %p{id: 'external_company'}
      = f.label :external_company, class: 'necessary'
      = f.collection_select :external_company_id, Contact.companies.order_by_name, :id, :name, prompt: t(:prompt_please_select)
      = link_to l(:label_contact_new), {controller: 'contacts', action: 'new', project_id: Project.find(Setting[:plugin_redmine_meeting][:project_id]), back_url: url_for(params)}, method: 'get', class: 'icon icon-add'
    %p{id: 'place'}
      = f.label :place, class: 'necessary'
      = f.text_field :place, size: 100, style: 'width: 60%'
      -#
        :javascript
          observeAutocompleteField('meeting_agenda_place', '#{escape_javascript autocomplete_for_place_meeting_agendas_path}')
      = link_to l(:label_meeting_room_reserve_new), {controller: 'meeting_room_selectors', action: 'new'}, remote: true, method: 'get', class: 'icon icon-add', id: 'link_to_meeting_room'
    %p{id: 'address'}
      = f.label :address
      = f.text_field :address, size: 100, style: 'width: 60%'
    %p.user_id
      = f.label :asserter, class: 'necessary'
      = f.collection_select :asserter_id, User.active.sorted, :id, :name, prompt: t(:prompt_please_select)
    %p.contact_id
      = f.label :external_asserter, t(:field_asserter), class: 'necessary'
      = f.collection_select :external_asserter_id, Contact.visible.people.order_by_name, :id, :name, prompt: t(:prompt_please_select)
      - project = Project.find(Setting[:plugin_redmine_contacts][:project_id]) rescue nil
      = link_to l(:label_contact_new), {controller: 'contacts', action: 'new', project_id: project}, class: 'icon icon-add'
    %p
      = f.label :asserter_id_is_contact, t(:label_meeting_agenda_asserter_is_contact)
      = f.check_box :asserter_id_is_contact, class: 'user_id_is_contact', onclick: 'toggleReporterType(this);'
    %p
      = f.label :meeting_company, class: 'necessary'
      = f.collection_select :meeting_company_id, MeetingCompany.sorted, :id, :name, prompt: t(:prompt_please_select)
    .splitcontentleft
      %p
        = f.label :meet_on, class: 'necessary'
        = f.text_field :meet_on, size: 10, class: 'calendar_for'
        = calendar_for('meeting_agenda_meet_on')
      %p
        = f.label :priority_id, l(:field_priority), class: 'necessary'
        = f.collection_select :priority_id, IssuePriority.all, :id, :name, prompt: t(:prompt_please_select)
    .splitcontentright
      %p
        = f.label :start_time, l(:label_meeting_agenda_start_time), class: 'necessary'
        = f.time_select :start_time, minute_step: 5, include_blank: true
      %p
        = f.label :end_time, l(:label_meeting_agenda_end_time), class: 'necessary'
        = f.time_select :end_time, minute_step: 5, include_blank: true
  %h3{style: "margin-top: 33px"}=l(:label_meeting_question_plural)
  = f.fields_for :meeting_questions
  = f.link_to_add l(:button_add), :meeting_questions, class: 'icon icon-add'

  %fieldset
    %legend= l(:label_attachment_plural)
    = link_to_attachments @object if @object.attachments.any?
    %p= render partial: 'attachments/form', locals: {container: @object}

  :javascript
    function toggleExternal(element) {
      $('#external_company').hide();
      $('#address').hide();
      if (element.checked) {
        $('#external_place_type').show();
        $('label[for=meeting_agenda_external_company]').get(0).innerHTML='#{l(:field_external_company)}<span class="required"> *</span>';
        $('#place').hide();
        $('#link_to_meeting_room').hide();
        $('#meeting_agenda_external_place_type_building_object').each( function(){
          toggleBuildingObject(this);
        });
        $('#meeting_agenda_external_place_type_external_company').each( function(){
           toggleExternalCompany(this);
        });
      } else {
        $('#external_place_type').hide();
        $('label[for=meeting_agenda_external_company]').get(0).innerHTML='#{l(:field_external_company)}';
        $('#place').show();
        $('#link_to_meeting_room').show();
      }
    }

    function toggleBuildingObject(element) {
      if (element.checked) {
        $('#external_company').hide();
        $('#address').show();
        $('label[for=meeting_agenda_address]').get(0).innerHTML='#{l(:field_address)}<span class="required"> *</span>';
      }
    }

    function toggleExternalCompany(element) {
      if (element.checked) {
        $('#external_company').show();
        $('#address').show();
        $('label[for=meeting_agenda_address]').get(0).innerHTML='#{l(:field_address)}';
      }
    }

    function toggleReporterType(element) {
      var contacts = $(element).parent().parent().find('.contact_id');
      var users = $(element).parent().parent().find('.user_id');
      if (element.checked) {
        contacts.show();
        users.hide();
      } else {
        contacts.hide();
        users.show();
      }
    }

    $(function() {
      $('.autocomplete_for_issue:not(.autocomplete)').each( function(index){
        observeAutocompleteField( $(this).attr('id'), '#{escape_javascript autocomplete_for_issue_meeting_agendas_path}')
      } );
      $('.necessary:not(.starred)').each( function(){
        $(this).addClass('starred').append('<span class="required"> *</span>');
      });
      $('.check_reporter').each( function(){
        $(this);
      });
      $(document).on('nested:fieldAdded', function() {
        $('.autocomplete_for_issue:not(.autocomplete)').each( function(index){
          observeAutocompleteField( $(this).attr('id'), '#{escape_javascript autocomplete_for_issue_meeting_agendas_path}')
        } );
        $('.necessary:not(.starred)').each( function(){
          $(this).addClass('starred').append('<span class="required"> *</span>');
        });
        $('.user_id_is_contact').each( function() {
          toggleReporterType(this);
        });
      });
      $('#meeting_agenda_is_external').on('click', function() {
        toggleExternal(this);
      });
      $('#meeting_agenda_external_place_type_external_company').on('click', function() {
        toggleExternalCompany(this);
      });
      $('#meeting_agenda_external_place_type_building_object').on('click', function() {
        toggleBuildingObject(this);
      });
      $('#meeting_agenda_is_external').each( function() {
        toggleExternal(this);
      });
      $('.user_id_is_contact').each( function() {
        toggleReporterType(this);
      });
    });
